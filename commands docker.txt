Docker para Desenvolvedores (com Docker Swarm e Kubernetes)

https://despegar.udemy.com/course/docker-para-desenvolvedores-com-docker-swarm-e-kubernetes/learn/lecture/25249246#overview


docker ps
docker version

docker run docker/whalesay cowsay docker

docker run -it ubuntu
exit


docker container ls
ou 
docker ps (alias)


para ver quais os container foram executados
docker ps -a


//rodar um container com interação (-it)


docker run -it node


25 - Container X VM (Virtual machine)


26 - Rodando container em background (detacked)

docker run -d nginx

27 - Expondo porta de contaniner

-p 5000:80;

docker run -d -p 5000:80  nginx

28 - Parando container

docker stop 452d016e3c16


29 - Reiniando container

docker start <id>

docker start <name>


30 - Definindo nome para um container

docker run -d -p  5000:80 --name nginx_app nginx

31 - Acessando os logs de um container

docker logs <name>
docker logs <id>


32 - Removendo container

docker rm <name>
docker rm <id>

------Se estiver rodando para parar e remomer---------------
docker rm -f <name>
docker rm -f <id>




--------------------------------Seção 3 ------------------------------------


CRIANDO IMAGENS E AVANÇANDO EM CONTAINERS


35 - O que é imagem?

36 - Como escolher uma imagem

docker run -d -p 8080:80 --name meu_apache

37 - Criando a nossa primeira imagem

FROM: imagem base;
WORKDIR: diretório da aplicação;
EXPOSE: porta da aplicação;
COPY: quais arquivos precisam ser copiados;


38 - Rodando a nossa imagem em um container

docker build <diretório da imagen>

caso o Dockerfile esteja na mesma pasta utilizar o comando

docker build .

 docker run -d -p 3000:3000 2bf49bc23d02


docker run -d -p 3005:3000 --name MinhaPrimeiraImagem 2bf49bc23d02

40 - Cache de camadas

41 - Fazendo o download de IMAGENS

docker pull python

42 - Mais informações sobre os comandos

docker run --help

43 - Multiplas aplicações do mesmo container

44 - Nomeando IMAGENS

docker tag <id_imagen> <nome_imagen> em letras minusculas

exemplo: 
docker tag 443a10196b08 minha_imagem_nomeada

incluindo TAG na imagem
docker tag <id_imagen> <nome_imagen>:<nome>
exemplo: 
docker tag 443a10196b08 minha_imagem_nomeada:minha_tag


45 - Nomeando imagem no build
docker build -t <nome_imagem>
docker build -t <nome_imagem>:<tag_imagem>

exemplo:

docker build  -t meunode_novo:v1


46 - Reiniciando container com interatividade

docker start -i <nome_container>
docker start -i <id_container>

exemplo: 

docker start -i meunode                 


47 - Removendo imagens

docker rmi -f <nome_imagem> 

exemplo:
docker rmi -f  443a10196b08

48 - Remoção de imagens e containers não utilizados

docker system prune

49 - Removendo containers após utilização

docker run --rm <container>

exemplo
docker run -d --rm  -p  3000:3000 --name teste cf9fa9470165

obs: ao realizar o stop do container o mesmo será apagado em função da flag --rm


50 - Copiando arquivos do container

docker cp <nome_container>:<caminho_arquivo> <caminho_destino>
exemplo:
docker cp teste:/app/app.js ./copia/

51 - Verificando processamento do container

docker top <container>

exemplo:

docker top teste

52 - Inspecionando container

docker inspec <container>

exemplo:

docker inspect teste


53 - Verificando processamento

docker stats <container>

54 - Autenticacao no terminal

https://hub.docker.com

logar no hub 

docker login
login e senha


55 - Encerrar conecção

docker logout


56 - Enviando imagens para o hub

docker push <imagem>

1 - deve criar o repositorio no docker hub

2 - deve renomear a imagem conforme a criação no hub
exemplo:
docker build . -t fabioramosalves/nodeteste

3 - Realizar o envio para o repositório remoto

exemplo:
docker push fabioramosalves/nodeteste


57 - Atualizando imagens no Hub 

1 - atualizar a tag com o docker build incluindo a tag
exemplo:
docker build . -t fabioramosalves/nodeteste:version1

2 - Subir a nova versao 

exemplo:

docker push fabioramosalves/nodeteste:version1



58 - Utilizando nossa imagem

docker pull fabioramosalves/nodeteste:version1

docker run --name teste_imagem -p 3000:3000 -d fabioramosalves/nodeteste:version1




--------------Seção 4 -----------------------------------

61 - O que são volumes?

forma prática de persistir dados sem depender de containers.

62 - Tipos de volumes

- Anonimos
- Nomeados
- Bind mounts


63 - Criando o projeto para trabalhar com volumes

65 - Volumes anônimos

docker run -v /data

exemplo
docker run -d -p 5001:80 --name phpcontainer --rm -v /data  phpmessages

- verificando volumes

docker volume ls

docker inspect <nome_container>


66 - volumes Nomeados


docker run -v nomedovolume:/data

exemplo:
docker run -d -p 5001:80 --name phpcontainer --rm -v volumephp:/var/www/html/messages  --rm  phpmessages


67 - Bind mounts
para salvar volumes no host da maquina que executa o docker

docker run /dir/data:/data

exemplo:
docker run -d -p 5001:80 --name phpcontainer -v  C:\Estudo\Docker\volumes\messages:/var/www/html/messages  --rm  phpmessages


68 - O poder extra do Bind Mount 

persistir informações do projeto

exemplo:
docker run -d -p 5001:80 --name phpcontainer -v  C:\Estudo\Docker\volumes\:/var/www/html/ --rm  phpmessages         


69 - Criando volumes manualmente

docker volume create volumeteste

Associando um volume na criação do container
docker run -d -p 5001:80 --name phpcontainer -v  volumeteste:/var/www/html/ --rm  phpmessages


70 - Listando volumes

docker volume ls

71 - Inspecionando volumes

docker inspect <nome_volume>

docker inspect volumeteste


72 - Removendo volumes

docker volume rm <nome_volume>

docker volume rm testevolume

73 - Remoção de vlumes em massa

docker volume prune

74 - Volume somente leitura

docker run -v volume:/data:ro

exemplo:
docker run -d -p 5001:80 --name phpcontainer -v  C:\Estudo\Docker\volumes\:/var/www/html/:ro --rm  phpmessages


75 - Conclusão da Seção

3 tipos de volume 
anonimos, nomeados e o bind mount.



----------------------Seção 5--------------------------------------

Networks

Externa: 
    Conexão com uma API de um servidor remoto;

Com o host:
    Comunicação com a máquina que está executando o docker;

Entre Containers: 
    Comunicação que utiliza o driver bridge e permite a comunicação entre dois ou mais containers;


81 - Listando Networks

docker network ls;

82 -  criando redes

docker network create <nome>

exemplo 
docker network create minharede (bridge) default
docker network create -d macvlan meumacvlan

83 - removendo redes

docker network rm <nome_rede>

exemplo
docker network rm b97297dd1ae4 


84 - Removendo redes não utilizadas

docker network prune


85 - instalando o postman


86 - Conexão Externa (não funcionou com o python)

docker run -d -p 5000:5000 --name flask_api_container --rm --network flasknetwork flaskapinetwork

87 - Conexão com máquina host (não funcionou com o python com mysql)

docker run -d -p 3306:3306 --name maysql_api_container --rm --network flaskapinetwork -e MYSQL_ALLOW_EMPTY_PASSAWORD=True mysql_api_network

88 - conectando um container a uma redes


89 - conectando um container a uma redes

docker network connect <rede> <container>

90 - Desconectando un container

docker network disconnect <rede> <container>


91 - Inspecionando redes

docker network inspect <nome_da_rede>



-----------------------------------------Conexão banco de dados-------------------------------

1 - criar imagem mysql

dentro de C:\Estudo\Docker\networks\conn_containers\mysql
executar:

docker build -t mysql_api_network_image .

2 - criar a rede

docker network create flask_api_network

3 - rodar o container

docker run -d -p 3306:3306 --name mysql_api_container --rm --network flask_api_network -e MYSQL_ALLOW_EMPTY_PASSWORD=True  mysql_api_network_image


4 - criando a imagem do flask (flask_api_network_image)

docker build -t flask_api_network_image .

4 - criando o container do flask (flask_api_network_container)


docker run -d -p 5000:5000 --name flask_api_network_container --rm --network flask_api_network  flask_api_network_image




----------------------------------Introdução YAML-------------------------------


nome: "Matheus"
idade: 30 #esta é a idade do usuário

#este objeto descreve o nosso projeto
objeto:
  versao: 2.2
  arquivo: "teste.txt"
  filho:
    nome: "Fabio"


# Tipos de dados
# Dados numéricos 
# Inteiros 10
# Float 10.2


# Strings não aceita acentos (unicode)
#com aspas e sem aspas
minhaStringSemAspas: teste
minhaStringComAspas: "teste"

# Inserindo valores nulos duas maneiras...

valorNulo: null
valorNulo1: ~

# valores boleanos

Verdadeiro_On: On
Verdadeiro_True: True

False_Off: Off
False_False: False

# Listas dusas maneiras

Lista: [1,2,3,4,5]

Lista_Items: # mais usada
- 1
- 2
- 3
- 4
- 4

Outro_exemplo_lista: 
- 15
- "teste"
- On
- Off


# Dictionary com chave valor

obj_0: {a: a, b: b, c: False, ObjetoInterno: {a: 1}}

#outra maneira

obj_1: 
  a: a
  b: b
  c: False
  ObjetoInterno:
    a: 1

# Conclusão



-----------------------------Docker Compose----------------------------------------------


105 - Introdução

106 - O que é o Docker Compose?

107 - Instalando o compose no Linux

108 - Criando nosso arquivo de Compose

109 - Rodando o Compose

docker-compose up


110 - Rodando o Compose em background

flag -d
exemplo:
docker-compose up -d 


111 - Parando o Compose

docker compose down



112 - Variáveis de ambiente no Compose

 env_file:
      - ./config/wp.env # utilizando um arquivo de configuração para ler as variáveis de ambiente

      # Incluindo variaveis de ambiente dentro do arquivo diretamente

     #     environment:
     # WORDPRESS_DB_HOST: db:3306
     # WORDPRESS_DB_USER: matheus
     # WORDPRESS_DB_PASSWORD: secret
     # WORDPRESS_DB_NAME: wordpress





115 - realizando o build com o compose

em vez de colocar a imagem no arquivo docker-compose, coloca-se o build com o caminho a ser realizado o 
build.


116 - Volume bind mount no Compose

utilizado para atualizar os arquivos durante o desenvolvimento do projeto.

exemplo:

volumes: 
  - "C:\\Estudo\\Docker\\5_compose\\6_bind_mount_compose\\flask:/app"

117 - Verificando serviços do compose


123 - maneiras de executar o Swarm


124 - setup do Swarm na AWS 


aws.amazon.com

EC2 - maquinas mais utilizadas para projetos Web 


comandos

sudo yum install docker

sudo docker ps

sudo service docker start

sudo docker ps

sudo usermod -a -G docker ecd-user

sudo docker info

sudo docker swarm init 

sudo docker swarm leave -f 



-------------------Swarm Labs docker--------------------------


https://labs.play-with-docker.com/#


no 

docker swarm init --advertise-addr 192.168.0.13


# node 1
ssh -i ida_rsa ip172-18-0-30-cd7hpte3tccg00ftj68g@direct.labs.play-with-docker.com

# node 2
ssh -i ida_rsa ip172-18-0-16-cd7hpte3tccg00ftj68g@direct.labs.play-with-docker.com

# node 3
ssh -i ida_rsa ip172-18-0-33-cd7hpte3tccg00ftj68g@direct.labs.play-with-docker.com


no powershell execute o comando abaixo:

ssh-keygen

deixar vazio o nome do arquivo e a senha

assim será gerado um arquivo ida_rsa no caminho:
C:\Users\fabio.ramos.alves/.ssh/id_rsa




128 - Listando todos os node

docker node ls


129 - Adicionando máquinas ao Swarm

sair do node 
docker swarm leave -f

docker swarm init


#token para join

- no node1 executar o comando para sair
docker swarm leave -f

- posteriormente executar o comando para iniciar

docker swarm init --advertise-addr 192.168.0.13
- obterá o join abaixo para iniciar os nodes nas outras instancias.

docker swarm join --token SWMTKN-1-4xlbotrm9r8esh3550q6n7herik0cpj0ql0606usl5teiecw2r-8llkxzy8fp0vin8ucbgy8qv1o 192.168.0.13:2377


130 - subindo serviço no Swarm

docker service create --name nginxswarm -p 80:80 nginx


131 - verificar serviços rodando no Swarm

docker service ls

132 - Removendo serviços

docker service rm <nome>


133 - Replicando serviços

docker create --name <nome> --replicas <numero> <imagem>

exemplo: 
docker service create --name nginxreplicas --replicas 3 -p 80:80 nginx

134 - testando orquestração do Swarm

- parar o serviço dentro de um work,
- verificar que o manager reinicia uma nova intancia quando um dos serviços cai.



135 - Recuperando o token do manager

para não ter que iniciar um novo node, basta executar o comando abaixo que é 
gerado o token para o join dos workers:

docker swarm join-token manager


136 - Mais informações sobre o Swarm

docker info

executar no node manager


137 - Deixar o Swarm em um Node

a partir do comando abaixo a instância não é contada mais como um Node para o Swarm
docker swarm leave -f


138 - Removendo um Node 

docker node rm <ID> -f
exemplo:
docker node rm 


139 - inspecionando serviços

docker service inspect <id>

exemplo:

docker service ls (para pegar o id do serviço)

docker service inspect g975a7yeaysq


140 - Verificar quais container estão rodando

docker service ps <id>

comando bastante semelhante ao docper ps -a 


141 - Compose no Swarm

criar um arquivo .yaml com o editor vim



docker stack deploy -c <ARQUIVO.YAML> <NOME>



142 - escalando nossa aplicação

docker service scale <NOME>=<REPLICAS>

exemplo:

docker service scale nginx_swarm_web=3


143 - para de receber tasks em num node

docker node update --availability drain<ID>


144 - Atualizando uma imagem no Swarm

docker service update --image <IMAGEM> <SERVICO>

apenas os node ativos receberam a atualização

exemplo:

docker service update --image nginx:1.18.0 pdq


145 - criando redes para serviços do swarm

docker network create

exemplo:
docker network create --driver overlay swarm
docker service create --name nginxreplicas --replicas 3 -p 80:80 --network swarm nginx <id>


146 - conectando um serviço a uma rede já existente

docker service update --network-add <REDE> <NOME>

-> checamos o resultado com inspect


--------------------------Seção 9 orquestração com kubernetes modo imperativo--------------------------------
imperativo quando iniciamos com aplicação de comandos


150 - conceitos fundamentais:

- Control Plane: Onge é gerado o controle dos processos dos Nodes;

- Nodes: Máquinas que são gerenciadas pelo Control Plane;

- Deployment: A execução de uma imagem/projeto em um Pod;

- Pod: um ou mais containers que estão em um Node;

- Services: Serviços que expõe os Pods ao mundo externo;

- Kubectl: Cliente de linha de comando para o kubernetes;



151 - Dependências necessárias

- Kubectl
- MiniKube


154 - inicializando o MiniKube

minikube start --driver=<DRIVER>

minikube start --driver=docker


155 - Parando o minikube

minikube stop

*Obs o serviço não é startado ao reiniciar a maquina no windows.


156 - Acessando a Dashboard

minikube Dashboard

com a flag -- url é possível ver a url gerada.

minikube dashboard --url


--------------Deployment-------------

1 - crar um projeto em flask
2 - buildar a imagem
3 - Enviar ao Docker Hub
4 - Testar rodar em um container
5 - teste com kubernetes


- subindo o projeto no docker hub (aula - 6_kubernetes) 


docker build -t fabioramosalves/flask-hub-projeto .
docker run -d -p 5000:5000 --name flask-kube --rm fabioramosalves/flask-hub-projeto
docker push fabioramosalves/flask-hub-projeto



159 - Criando o Deployment

kubectl create deployment <NOME> --image=<IMAGEM>

exemplo:
kubectl create deployment flask-deployment --image=fabioramosalves/flask-hub-projeto


160 - verificando deployments

kubectl get deploments 
kubectl describe deployments


161 - Checando Pods

kubectl get pods 

162 - configurações do kubernetes

kubectl config view


163 - Services na teoria

- As aplicações do kubernetes não tem conexão com o mundo externo, por isso
precisamos criar um Service, que é o que possibilita expor os Pods;

- Isso acontece pois os Pods são criados para serem destruídos e 
perdem tudo, ou seja, os dados gerados neles também são apagados;

- Criamos então os Services que é uma entidade separada dos Pods, que expõe eles a uma rede;


163 - Criando um Service

kubectl expose deployment <NOME> --type=<TIPO> --port<PORTA>

exemplo:
primeiro verifica o nome do deployment criado, depois executa o expose

kubectl get deployment

kubectl expose deployment flask-deployment --type=LoadBalancer --port=5000


164 - Gerando um IP para o Service

minikube service <nome>

minikube service flask-deployment

*obs como estamos acessando a máquina local utilizaremos o 
minikube para a geração do ip de acesso ao serviço.


166 - Detalhes do serviço

kubectl get services

kubectl describe service/<NOME>

exemplo:

kubectl describe services/flask-deployment


167 - Escalando aplicações

kubectl scale deployment/<NOME> --replicas=<NUMERO>

kubectl get pods


exemplo: 

kubectl scale deployment/flask-deployment --replicas=5



168 - Verificando número de replicas

kubectl get rs


169 - Diminuir o número de replicas (Pods)

basta diminuir o numero de replicas que eram 5 para 4, 3... etc...

kubectl scale deployment/flask-deployment --replicas=4


170 Atualizar a imagem do projeto

1 Atualizar a imagem

exemplo:
docker build -t  fabioramosalves/flask-hub-projeto:v1.2 .

2 Subir a imagem no Docker Hub

3 Realizar o set da imagem no kubernetes

- precisará do nome do container

kubectl set image deploment/<NOME> <NOME_CONTAINER>=<NOVA_IMAGEM>

exemplo:
kubectl set image deployment/flask-deployment flask-hub-projeto=fabioramosalves/flask-hub-projeto:v1.1



171 - Desfazer alteração de projeto

kuberctl rollout status deployment/<NOME>

kubectl get pods 

kubectl rollout undo deployment/<NOME>


172 - Deletando Services

kubectl delete service<NOME>

exemplo:
kubectl delete service flask-deployment


173 - Deletando deployments

kubectl delete deployment<NOME>

kubectl delete deployment flask-deployment




--------------------------Seção 9 orquestração com kubernetes modo declarativo--------------------------------

declarativo é guiado por um arquivo, semelhante ao Docker-compose

Desta maneira, tornamos nossas configurações mais simples e centralizamos tudo em
um comando em um arquivo .yaml


Chaves mais utilizadas

apiVersion: 
  Versão utilizada da ferramenta;

kind: 
  tipo do arquivo (Deployment, Service);

metadata: 
  descrever algum objeto, inserrindo chaves como name;

replicas:
  número de replicas de Nodes/Pods;

containers:
  definir as especificações de containers como: nome e imagem;


  
176 - Criando arquivo .ymal para o kubernetes

foi criado o arquivo flask.yaml no 2_modo_declarativo


177 - Rodando o arquivo do projeto

kubectl apply -f <ARQUIVO>

exemplo:
kubectl apply -f flask.yaml



para rodar no minikube é preciso espor a porta.

kubectl expose deployment flask-app-deployment --type=LoadBalancer --port=5000
minikube start 
minikube service flask-app-deployment
minikube dashboard --url


178 - Parando o deploment

kubectl delete -f <ARQUIVO>

exemplo:
kubectl delete -f .\flask.yaml


179 - Criando o arquivo de service

foi criado o arquivo flask-service.yaml no 2_modo_declarativo



180 - Iniciando o service

kubectl apply -f <ARQUIVO>

exemplo:
kubectl apply -f flask-service.yaml

testando com minikube
minikube service service/flask-service


181 - Parando um serviço

kubectl delete -f <ARQUIVO>

exemplo:
kubectl delete -f flask-service.yaml



182 - Atualizando o projeto

1 - criar uma nova versão da imagem
   docker build -t  fabioramosalves/flask-hub-projeto:v1.3 .

2 - Realizar o push no Docker Hub
    docker push fabioramosalves/flask-hub-projeto:v1.3

3 - Alterar a tag no arquivo flask.yaml
        spec:
      containers:
        - name: flask
          image: fabioramosalves/flask-hub-projeto:v1.2

4 - Reaplicar o comando de apply;
    kubectl apply -f flask.yaml


5 - Unindo arquivos 

é utilizado  3 traços (---)

obs o <service> vem primeiro que o <deployment>

para isso realizamos a criação de um novo arquivo 



---------------------------------Resumo do curso 3_uniao_arquivos--------------------------------------

1 - Cria o projeto no qual deseja dockenizar

2 - criar o arquivo Dockerfile

3 - Realiza o build a partir da pasta onde encontra-se o Dockerfile
      docker build -t <nome_imagem>
      docker build -t <nome_imagem>:<tag_imagem>

4 - cria o arquivo .yaml com a configuração de serviços e deploy

5 - sobe o arquivo no Docker Hub 
      docker push <nome_imagem>:<tag_imagem>

6 - Rodando o arquivo do projeto
      kubectl apply -f flask-project.yaml

7 - Start MiniKube
    minikube start


8 - Ininiar o MiniKube com o service

    minikube service flask-service



9 - verificar o dashbord do MiniKube

minikube dashboard --url



-----------------------------FIM--------------------------------
